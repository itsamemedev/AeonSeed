name: AeonSeed CI

on:
  push:
    branches: [main, dev]
  pull_request:
  workflow_dispatch:

jobs:
  check:
    name: Lint & Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles("**/Cargo.lock") }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "1.77.1"
          override: true
      - name: Install tools
        run: |
          cargo install --locked cargo-audit
          cargo install --locked cargo-deny
      - name: Format Check
        run: cargo fmt -- --check
      - name: Clippy Lint
        run: cargo clippy --all-targets -- -D warnings
      - name: Dependency Audit
        run: cargo audit
      - name: Security Check
        run: cargo deny check

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles("**/Cargo.lock") }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "1.77.1"
          override: true
      - name: Install coverage tool
        run: cargo install --locked cargo-llvm-cov
      - name: Run Tests
        run: cargo test --workspace --all-features
      - name: Coverage Report
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info
      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: lcov.info

  build_client:
    name: Build Client
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles("**/Cargo.lock") }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "1.77.1"
          override: true
      - name: Install tools
        run: |
          cargo install --locked cargo-bloat
          cargo install wasm-pack
      - name: Build Client
        run: cargo build --release --features "seed_ai"
      - name: Build Size
        run: cargo bloat --release --features "seed_ai" > bloat.txt
      - name: WebAssembly Build
        if: ${{ hashFiles(web/**) !=  }}
        run: wasm-pack build
      - uses: actions/upload-artifact@v3
        with:
          name: client-${{ matrix.os }}
          path: |
            target/release/aeonseed*
            bloat.txt

  build_server:
    name: Build Server
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles("**/Cargo.lock") }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "1.77.1"
          override: true
      - name: Install tools
        run: |
          cargo install --locked cargo-bloat
      - name: Build Server
        run: cargo build --release --bin aeonseed-server --features "seed_ai"
      - name: Build Size
        run: cargo bloat --release --bin aeonseed-server --features "seed_ai" > bloat.txt
      - uses: actions/upload-artifact@v3
        with:
          name: server-${{ matrix.os }}
          path: |
            target/release/aeonseed-server*
            bloat.txt

  release:
    name: Create Release
    needs: [build_client, build_server]
    if: startsWith(github.ref, refs/tags/v)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" ./artifacts/** --notes-file CHANGELOG.md
